{"version":3,"sources":["components/card/CountryCard.jsx","components/card-list/card-list.jsx","Countries.jsx","App.js","serviceWorker.js","index.js"],"names":["CountryCard","props","className","alt","src","country","countryInfo","flag","cases","todayCases","casesPerOneMillion","CardList","countries","map","key","id","Countries","state","searchField","fetch","then","response","json","setState","this","filterCountries","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yTAGaA,G,YAAc,SAAAC,GAAK,OAC5B,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,OAAOC,IAAKH,EAAMI,QAAQC,YAAYC,OAC/C,4BAAKN,EAAMI,QAAQA,SACnB,0CAAgBJ,EAAMI,QAAQG,OAC9B,2CAAiBP,EAAMI,QAAQI,YAC/B,gDAAsBR,EAAMI,QAAQK,uBCL3BC,EAAW,SAAAV,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMW,UAAUC,KAAI,SAAAR,GAAO,OACxB,kBAAC,EAAD,CAAaS,IAAKT,EAAQC,YAAYS,GAAIV,QAASA,SC0BhDW,E,kDA9Bb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXL,UAAW,GACXM,YAAa,IAJE,E,gEAOE,IAAD,OAClBC,MAAM,uCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAR,GAAS,OAAI,EAAKW,SAAS,CAAEX,UAAWA,S,+BAExC,IAAD,SAC4BY,KAAKP,MAAhCL,EADD,EACCA,UAAWM,EADZ,EACYA,YACbO,EAAkBb,EAAUc,QAAO,SAAArB,GAAO,OAAIA,EAAQA,QAAQsB,cAAcC,SAASV,EAAYS,kBAEvG,OACE,6BACE,0DACA,2BACEE,KAAK,SACLC,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAI,EAAKT,SAAS,CAAEL,YAAac,EAAEC,OAAOC,WAEvD,kBAAC,EAAD,CAAUtB,UAAWa,S,GAzBLU,a,MCUTC,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCKcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.316d91ad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CountryCard.styles.css\";\n\nexport const CountryCard = props => (\n    <div className=\"card-container\">\n    <img alt=\"flag\" src={props.country.countryInfo.flag} />\n    <h1>{props.country.country}</h1>\n    <p>Total Cases {props.country.cases}</p>\n    <p>Todays Cases {props.country.todayCases}</p>\n    <p>Cases per million {props.country.casesPerOneMillion}</p>\n    </div>\n)\n","import React from \"react\";\nimport \"./card-list.styles.css\"\nimport { CountryCard } from \"../card/CountryCard\";\n\nexport const CardList = props => (\n    <div className=\"card-list\">\n        {props.countries.map(country => (\n            <CountryCard key={country.countryInfo.id} country={country} />\n        ))}\n        \n    </div>\n);","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list\";\nclass Countries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      searchField: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://corona.lmao.ninja/countries\")\n      .then(response => response.json())\n      .then(countries => this.setState({ countries: countries }));\n  }\n  render() {\n    const { countries, searchField } = this.state;\n    const filterCountries = countries.filter(country => country.country.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div>\n        <h1>Here is my CoronoVirus App</h1>\n        <input\n          type=\"search\"\n          placeholder=\"Search Countries\"\n          onChange={e => this.setState({ searchField: e.target.value })}\n        />\n        <CardList countries={filterCountries} />\n      </div>\n    );\n  }\n}\n\nexport default Countries;\n","import React from 'react';\nimport Countries from \"./Countries\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Countries />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}